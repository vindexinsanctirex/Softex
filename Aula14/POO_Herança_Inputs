# 1. Classe Usuario base
class Usuario:
    def __init__(self, nome, email):
        self.nome = nome
        self.email = email
    
    def exibir_informacoes(self):
        return f"Nome: {self.nome}, Email: {self.email}"
    
    def saudacao(self):
        return "Ol√°, usu√°rio"

# 2. Classe Cliente que herda de Usuario
class Cliente(Usuario):
    def __init__(self, nome, email, saldo=0):
        super().__init__(nome, email)  # Chama o construtor da classe pai
        self.saldo = saldo
    
    def saudacao(self):  # Sobrescrevendo o m√©todo
        return "Ol√°, cliente"
    
    def exibir_informacoes_completas(self):
        return f"{super().exibir_informacoes()}, Saldo: R${self.saldo:.2f}"

# 3. Classes para heran√ßa m√∫ltipla
class Autenticacao:
    def login(self):
        return "Usu√°rio autenticado"
    
    def status(self):
        return "Status da autentica√ß√£o: Ativo"

class Permissao:
    def verificar_permissao(self):
        return "Permiss√£o verificada"
    
    def status(self):
        return "Status da permiss√£o: Concedida"

# 4. Classe Administrador com heran√ßa m√∫ltipla
class Administrador(Autenticacao, Permissao):
    def __init__(self, nome, email, nivel_acesso):
        self.nome = nome
        self.email = email
        self.nivel_acesso = nivel_acesso
    
    def exibir_info_admin(self):
        return f"Admin: {self.nome}, N√≠vel: {self.nivel_acesso}"

# 5. Hierarquia de classes: Usuario -> Funcionario -> Gerente
class Funcionario(Usuario):
    def __init__(self, nome, email, salario):
        super().__init__(nome, email)
        self.salario = salario
    
    def saudacao(self):
        return "Ol√°, funcion√°rio"
    
    def exibir_informacoes(self):
        return f"{super().exibir_informacoes()}, Sal√°rio: R${self.salario:.2f}"

class Gerente(Funcionario):
    def __init__(self, nome, email, salario, departamento):
        super().__init__(nome, email, salario)
        self.departamento = departamento
    
    def saudacao(self):
        return "Ol√°, gerente"
    
    def exibir_informacoes(self):
        return f"{super().exibir_informacoes()}, Departamento: {self.departamento}"

# Fun√ß√£o para entrada de dados com valida√ß√£o
def input_float(mensagem):
    while True:
        try:
            valor = float(input(mensagem))
            return valor
        except ValueError:
            print("Por favor, digite um valor num√©rico v√°lido.")

def input_int(mensagem):
    while True:
        try:
            valor = int(input(mensagem))
            return valor
        except ValueError:
            print("Por favor, digite um n√∫mero inteiro v√°lido.")

# Demonstra√ß√£o do c√≥digo com inputs
if __name__ == "__main__":
    print("=== SISTEMA DE CADASTRO DE USU√ÅRIOS ===")
    print("\nVamos criar diferentes tipos de usu√°rios:")
    
    # 1. Cadastro de Cliente
    print("\n" + "="*50)
    print("1. CADASTRO DE CLIENTE")
    print("="*50)
    
    nome_cliente = input("Digite o nome do cliente: ")
    email_cliente = input("Digite o email do cliente: ")
    saldo_cliente = input_float("Digite o saldo do cliente: R$ ")
    
    cliente = Cliente(nome_cliente, email_cliente, saldo_cliente)
    
    print(f"\n‚úÖ Cliente cadastrado com sucesso!")
    print(f"üìã Informa√ß√µes: {cliente.exibir_informacoes_completas()}")
    print(f"üëã Sauda√ß√£o: {cliente.saudacao()}")
    
    # 2. Cadastro de Funcion√°rio e Gerente
    print("\n" + "="*50)
    print("2. CADASTRO DE FUNCION√ÅRIO E GERENTE")
    print("="*50)
    
    nome_funcionario = input("Digite o nome do funcion√°rio: ")
    email_funcionario = input("Digite o email do funcion√°rio: ")
    salario_funcionario = input_float("Digite o sal√°rio do funcion√°rio: R$ ")
    
    funcionario = Funcionario(nome_funcionario, email_funcionario, salario_funcionario)
    
    print(f"\n‚úÖ Funcion√°rio cadastrado com sucesso!")
    print(f"üìã Informa√ß√µes: {funcionario.exibir_informacoes()}")
    print(f"üëã Sauda√ß√£o: {funcionario.saudacao()}")
    
    # Cadastro de Gerente
    print("\n" + "-"*30)
    print("Agora, vamos cadastrar um GERENTE:")
    
    nome_gerente = input("Digite o nome do gerente: ")
    email_gerente = input("Digite o email do gerente: ")
    salario_gerente = input_float("Digite o sal√°rio do gerente: R$ ")
    departamento_gerente = input("Digite o departamento do gerente: ")
    
    gerente = Gerente(nome_gerente, email_gerente, salario_gerente, departamento_gerente)
    
    print(f"\n‚úÖ Gerente cadastrado com sucesso!")
    print(f"üìã Informa√ß√µes: {gerente.exibir_informacoes()}")
    print(f"üëã Sauda√ß√£o: {gerente.saudacao()}")
    
    # 3. Cadastro de Administrador (heran√ßa m√∫ltipla)
    print("\n" + "="*50)
    print("3. CADASTRO DE ADMINISTRADOR")
    print("="*50)
    
    nome_admin = input("Digite o nome do administrador: ")
    email_admin = input("Digite o email do administrador: ")
    nivel_acesso = input("Digite o n√≠vel de acesso do administrador: ")
    
    admin = Administrador(nome_admin, email_admin, nivel_acesso)
    
    print(f"\n‚úÖ Administrador cadastrado com sucesso!")
    print(f"üîê Autentica√ß√£o: {admin.login()}")
    print(f"üîë Permiss√£o: {admin.verificar_permissao()}")
    print(f"üìä Status: {admin.status()}")
    print(f"üë§ Informa√ß√µes: {admin.exibir_info_admin()}")
    
    # 4. Mostrar MRO (Method Resolution Order)
    print("\n" + "="*50)
    print("4. ORDEM DE RESOLU√á√ÉO DE M√âTODOS (MRO)")
    print("="*50)
    
    print("A ordem em que Python busca os m√©todos √©:")
    for i, classe in enumerate(Administrador.__mro__, 1):
        print(f"{i}. {classe}")
    
    # 5. Demonstra√ß√£o do polimorfismo
    print("\n" + "="*50)
    print("5. DEMONSTRA√á√ÉO DE POLIMORFISMO")
    print("="*50)
    
    # Perguntar se quer adicionar mais usu√°rios
    usuarios_cadastrados = [cliente, funcionario, gerente]
    
    while True:
        adicionar = input("\nDeseja adicionar outro usu√°rio gen√©rico? (s/n): ").lower()
        if adicionar == 's':
            nome_user = input("Digite o nome do usu√°rio: ")
            email_user = input("Digite o email do usu√°rio: ")
            usuario_generico = Usuario(nome_user, email_user)
            usuarios_cadastrados.append(usuario_generico)
            print("‚úÖ Usu√°rio adicionado!")
        else:
            break
    
    # Mostrar todos os usu√°rios cadastrados
    print(f"\nüìä RESUMO DE TODOS OS {len(usuarios_cadastrados)} USU√ÅRIOS CADASTRADOS:")
    print("-" * 60)
    
    for i, usuario in enumerate(usuarios_cadastrados, 1):
        print(f"\n{i}. {usuario.saudacao()}")
        print(f"   {usuario.exibir_informacoes()}")
        print(f"   Tipo: {type(usuario).__name__}")
    
    # 6. Opera√ß√µes com o cliente
    print("\n" + "="*50)
    print("6. OPERA√á√ïES BANC√ÅRIAS DO CLIENTE")
    print("="*50)
    
    print(f"Saldo atual do cliente {cliente.nome}: R${cliente.saldo:.2f}")
    
    while True:
        print("\nOp√ß√µes:")
        print("1 - Depositar")
        print("2 - Sacar")
        print("3 - Ver saldo")
        print("0 - Sair")
        
        opcao = input("Escolha uma op√ß√£o: ")
        
        if opcao == '1':
            valor = input_float("Digite o valor para depositar: R$ ")
            cliente.saldo += valor
            print(f"‚úÖ Dep√≥sito realizado! Novo saldo: R${cliente.saldo:.2f}")
        
        elif opcao == '2':
            valor = input_float("Digite o valor para sacar: R$ ")
            if valor <= cliente.saldo:
                cliente.saldo -= valor
                print(f"‚úÖ Saque realizado! Novo saldo: R${cliente.saldo:.2f}")
            else:
                print("‚ùå Saldo insuficiente!")
        
        elif opcao == '3':
            print(f"üí∞ Saldo atual: R${cliente.saldo:.2f}")
        
        elif opcao == '0':
            print("Saindo do sistema...")
            break
        
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
    
    print("\n" + "="*50)
    print("üéâ PROGRAMA FINALIZADO COM SUCESSO!")
    print("Obrigado por usar o sistema de cadastro!")